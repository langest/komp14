PARSER_BEGIN(Lexer)

import java.util.*;
import java.io.*;

public class Lexer {

    public static List<Token> parseTokens() {
        ArrayList<Token> tokens = new ArrayList<Token>();
        while (true) {
            Token t = SyntaxChecker.getNextToken();
            if (t.kind == SyntaxCheckerConstants.EOF) break;
            tokens.add(t);
        }
        return tokens;
    }
}

PARSER_END(Lexer)

//Skip white space
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

//Comments
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

//Symbols
TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < COMMA: "," >
| < LT: "<" >
| < AND : "&&" >   
| < NOT : "!" >   
}

//Operators
TOKEN : {
	< PLUS: "+" >
| < MINUS: "-" >
| < MULT: "*" >
| < ASSIGN: "=" >
}

//Keywords
TOKEN : {
	< WHILE: "while" >
| < IF: "if" >
| < ELSE: "else" >
| < MAIN: "main" >
| < CLASS: "class" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >         
| < PRINT: "System.out.println" >
| < TRUE: "true" >
| < FALSE: "false" >
| < THIS: "this" >
| < RETURN: "return" >
| < NEW: "new" >
| < LENGTH: "length" >
}
//Typedefs
TOKEN : {
	< BOOLEAN: "boolean" >   
| < INTEGER: "int" >   
| < LONG: "long" >
| < STRING: "String" >
}
//Litterals
TOKEN : 
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

//Lexicals
TOKEN : {
	< ID: ["a"-"z""A"-"Z""_"]["a"-"z""A"-"Z""0"-"9""_"]*
| < INT_LIT: 0 | ["1"-"9"]["0"-"9"]* >
//| < LONG_LIT: 0["l""L"] | ["1"-"9"]["0"-"9"]*["l""L"] >
}

//Identifiers
/* Stuff from example file which we might need or not need.
TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}
*/


