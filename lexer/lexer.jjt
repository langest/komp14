options {
    MULTI=true;
    NODE_PREFIX="";
}

PARSER_BEGIN(Lexer)
package lexer;

import java.util.*;
import java.io.*;

public class Lexer {
	/*
    public static List<Token> parseTokens() {
        ArrayList<Token> tokens = new ArrayList<Token>();
        while (true) {
            Token t = Lexer.getNextToken();
            if (t.kind == LexerConstants.EOF) break;
            tokens.add(t);
        }
        return tokens;
    }
    */
}

PARSER_END(Lexer)

//Skip white space
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

//Comments
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

//Symbols
TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < COMMA: "," >
| < LT: "<" >
| < AND : "&&" >   
| < NOT : "!" >   
}

//Operators
TOKEN : {
	< PLUS: "+" >
| < MINUS: "-" >
| < MULT: "*" >
| < ASSIGN: "=" >
}

//Keywords
TOKEN : {
	< WHILE: "while" >
| < IF: "if" >
| < ELSE: "else" >
| < MAIN: "main" >
| < CLASS: "class" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >         
| < PRINT: "System.out.println" >
| < TRUE: "true" >
| < FALSE: "false" >
| < THIS: "this" >
| < RETURN: "return" >
| < NEW: "new" >
| < LENGTH: "length" >
}
//Typedefs
TOKEN : {
	< BOOLEAN: "boolean" >   
| < INTEGER: "int" >   
//| < LONG: "long" >
| < STRING: "String" >
}

//Lexicals
TOKEN : {
	< ID: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
| < INT_LIT: "0" | ["1"-"9"](["0"-"9"])* >
//| < LONG_LIT: 0["l""L"] | ["1"-"9"]["0"-"9"]*["l""L"] >
}


Program Program():
{}
{
	MainClass()
    (ClassDecl())*
    <EOF>
    {
		System.out.println("Successfully parsed everything");
        return jjtThis;
	}
}

void MainClass():
{}
{
	<CLASS>
	<ID>
	<LBRACE>
	<PUBLIC>
	<STATIC>
	<VOID>
	<MAIN>
	<LPAREN>
	<STRING>
	<LSQPAREN>
	<RSQPAREN>
	<ID>
	<RPAREN>
	<LBRACE>
	(LOOKAHEAD(2) VarDecl())*
    (Stmt())*
	<RBRACE>
	<RBRACE>
}

void ClassDecl():
{}
{
    <CLASS>
    <ID>
	{ jjtThis.setName(token.image); }
    <LBRACE>
    (VarDecl())*
    (MethodDecl())*
    <RBRACE>
}

void VarDecl():
{}

{
    Type()
    <ID>
    <SEMICOLON>
}

void MethodDecl():
{}
{
    <PUBLIC>
    Type()
    <ID>
    <LPAREN>
    FormalList()
    <RPAREN>
    <LBRACE>
    (LOOKAHEAD(2) VarDecl())*
    (Stmt())*
    <RETURN>
    Exp()
    <SEMICOLON>
    <RBRACE>
}

void FormalList():
{}
{
    (Type()
    <ID>
    (FormalRest())*)?
}

void FormalRest():
{}
{
    <COMMA>
    Type()
    <ID>
}

void Type():
{}
{
    LOOKAHEAD(2)
    <INTEGER> <LSQPAREN> <RSQPAREN> |
    <BOOLEAN> |
    <INTEGER> |
    <ID>
}

void Stmt():
{}
{
    <LBRACE> (Stmt())* <RBRACE> |
    <IF> <LPAREN> Exp() <RPAREN> Stmt() <ELSE> Stmt() |
    <WHILE> <LPAREN> Exp() <RPAREN> Stmt() |
    <PRINT> <LPAREN> Exp() <RPAREN> <SEMICOLON> |
    LOOKAHEAD(2) <ID> <ASSIGN> Exp() <SEMICOLON> |
    <ID> <LSQPAREN> Exp() <RSQPAREN> <ASSIGN> Exp() <SEMICOLON>
}

void Exp():
{}
{
    E1()
}

void E1():
{}
{
    E2()
    E1Cont()
}

void E1Cont():
{}
{
    (<AND> E2() E1Cont())?
}

void E2():
{}
{
    E3()
    E2Cont()
}

void E2Cont():
{}
{
    (<LT> E3() E2Cont())?
}

void E3():
{}
{
    E4()
    E3Cont()
}

void E3Cont():
{}
{
    ((<PLUS>|<MINUS>) E4() E3Cont())?
}

void E4():
{}
{
    E5()
    E4Cont()
}

void E4Cont():
{}
{
    (<MULT> E5() E4Cont())?
}

void E5():
{}
{
    <NOT> E5() |
    E6() E5Cont()
}

void E5Cont():
{}
{
    (<LSQPAREN> Exp() <RSQPAREN> |
    LOOKAHEAD(2) <DOT> <LENGTH> |
    <DOT> <ID> <LPAREN> ExpList() <RPAREN>)?
}

void E6():
{}
{
    <ID> |
    <INT_LIT> |
    <TRUE> |
    <FALSE> |
    <LPAREN> Exp() <RPAREN> |
    <THIS> |
    LOOKAHEAD(2) <NEW> <INTEGER> <LSQPAREN> Exp() <RSQPAREN> |
    <NEW> <ID> <LPAREN> <RPAREN>
}

void ExpList():
{}
{
    (Exp() (ExpRest())*)?
}

void ExpRest():
{}
{
    <COMMA> Exp()
}
