/* Generated By:JJTree: Do not edit this line. MethodDecl.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package mjc.lexer;

import generator.JasminPrinter;
import mjc.errors.TypeError;
import mjc.type_checker.SymTable;

public
class MethodDecl extends SimpleNode {

	private String name;

	public MethodDecl(int id) {
		super(id);
	}

	public MethodDecl(Lexer p, int id) {
		super(p, id);
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String toString() {
		return super.toString() + "(" + name + ")";
	}

	public Type getReturnType() {
		return (Type)children[0];
	}

	public FormalList getParameters() {
		return (FormalList) children[1];
	}

	public void pass2(SymTable symTable) {
		JasminPrinter.openMethod(this);

		((Type)children[0]).pass2(symTable);
		((FormalList)children[1]).pass2(symTable);
		for (int i = 2; i < children.length - 1; i++) {
			if (children[i] instanceof VarDecl) {
				((VarDecl)children[i]).pass2(symTable);
			} else {
				((Stmt)children[i]).pass2(symTable);
			}
		}
		Type returnType = ((Exp)children[children.length - 1]).pass2(symTable);
		if (!returnType.equals(getReturnType())) {
			throw new TypeError("Invalid return type for method " + name + ": got " + returnType.toShortString() + ", expected " + getReturnType().toShortString());
		}
		if (returnType.isInt() || returnType.isBoolean()) {
			JasminPrinter.print_ireturn();
		} else {
			JasminPrinter.print_areturn();
		}
		JasminPrinter.println("");
		JasminPrinter.print_limit_locals(150);
		JasminPrinter.print_limit_stack(150);
		JasminPrinter.closeMethod();
	}

}
/* JavaCC - OriginalChecksum=ba955e37a17bc86108731136437bad33 (do not edit this line) */
