/* Generated By:JJTree: Do not edit this line. FormalList.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package mjc.lexer;

import java.util.*;

import mjc.type_checker.SymTable;

public class FormalList extends SimpleNode {

	private String name;

	public FormalList(int id) {
		super(id);
	}

	public FormalList(Lexer p, int id) {
		super(p, id);
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	public void pass2(SymTable symTable) {
		if (children != null) {
			Type type = (Type)children[0];
			type.pass2(symTable);
			VarDecl varDecl = VarDecl.createVarDecl(type, name);
			symTable.addVariableNode(varDecl);
			for (int i = 1; i < children.length; i++) {
				((FormalRest)children[i]).pass2(symTable);
			}
		}
	}
	
	public String getMethodTypeDescriptor() {
		StringBuilder sb = new StringBuilder();
		if (children != null) {
			Type type = (Type)children[0];
			sb.append(type.getTypeDescriptor());
			for (int i = 1; i < children.length; i++) {
				sb.append(((FormalRest)children[i]).getTypeDescriptor());
			}
		}
		return sb.toString();
	}

	public String toString() {
		return super.toString() + "(" + name + ")";
	}
}
/* JavaCC - OriginalChecksum=0ba785bca515b000fc1eb5b5614a39f5 (do not edit this line) */
