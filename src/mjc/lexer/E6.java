/* Generated By:JJTree: Do not edit this line. E6.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package mjc.lexer;

import generator.JasminPrinter;
import mjc.errors.DummyException;
import mjc.errors.TypeError;
import mjc.type_checker.SymTable;

public
class E6 extends SimpleNode {
	
	private String image;
	private E6Type type;
	
	public E6(int id) {
		super(id);
	}

	public E6(Lexer p, int id) {
		super(p, id);
	}
	
	public enum E6Type {
		ID, INT_LIT, LONG_LIT, TRUE, FALSE, PAREN, THIS, NEW_INT_ARRAY, NEW_LONG_ARRAY, NEW_ID;
	}
	
	public void setType(E6Type type) {
		this.type = type;
	}
	
	public E6Type getType() {
		return type;
	}
	
	public void setImage(String image) {
		this.image = image;
	}
	
	public String getImage() {
		return image;
	}
	
	public Type pass2(SymTable symTable) {
		if (type == E6Type.ID) {
			VarDecl varDecl = symTable.getVariableNode(image);
			if (varDecl.isField()) {
				JasminPrinter.print_aload(0);
				JasminPrinter.print_getField(symTable.getCurrentClass(), varDecl);
				symTable.updateCurrentStackSize(1);
			} else {
				if (varDecl.getType().isCustom() || varDecl.getType().isIntArray()) {
					JasminPrinter.print_aload(symTable.getVariableIndex(varDecl.getName()));
				}else {
					JasminPrinter.print_iload(symTable.getVariableIndex(varDecl.getName()));
				}
				symTable.updateCurrentStackSize(1);
			}
			return varDecl.getType();
		} else if (type == E6Type.INT_LIT) {
			int val;
			try {
				val = Integer.parseInt(image);
			} catch (NumberFormatException e) {
				throw new DummyException("Invalid value for integer literal: " + image);
			}
			JasminPrinter.print_ldc(val);
			symTable.updateCurrentStackSize(1);
			return Type.createIntType();
		} else if (type == E6Type.LONG_LIT) {
			long val;
			try {
				val = Long.parseLong(image);
			} catch (NumberFormatException e) {
				throw new DummyException("Invalid value for long literal: " + image);
			}
			JasminPrinter.print_ldc2_w(val);
			symTable.updateCurrentStackSize(2);
			return Type.createLongType();
		} else if (type == E6Type.TRUE) {
			JasminPrinter.print_ldc(1);
			symTable.updateCurrentStackSize(1);
			return Type.createBooleanType();
		} else if (type == E6Type.FALSE) {
			JasminPrinter.print_ldc(0);
			symTable.updateCurrentStackSize(1);
			return Type.createBooleanType();
		} else if (type == E6Type.PAREN) {
			return ((Exp)children[0]).pass2(symTable);
		} else if (type == E6Type.THIS) {
			JasminPrinter.print_aload(0);
			symTable.updateCurrentStackSize(1);
			return Type.createCustomType(symTable.getCurrentClass().getName());
		} else if (type == E6Type.NEW_INT_ARRAY) {
			Type arraySize = ((Exp)children[0]).pass2(symTable);
			if (!arraySize.isInt()) {
				throw new TypeError("Non-int argument for array initialization");
			}
			JasminPrinter.print_newarray_int();
			return Type.createIntArrayType();
		} else if (type == E6Type.NEW_LONG_ARRAY) {
			Type arraySize = ((Exp)children[0]).pass2(symTable);
			if (!arraySize.isInt()) {
				throw new TypeError("Non-int argument for array initialization");
			}
			JasminPrinter.print_newarray_long();
			return Type.createLongArrayType();
		} else if (type == E6Type.NEW_ID) {
			ClassDecl classDecl = symTable.getClassNode(image);
			JasminPrinter.print_new(classDecl);
			JasminPrinter.print_dup();
			symTable.updateCurrentStackSize(2);
			JasminPrinter.invokeConstructor(classDecl);
			symTable.updateCurrentStackSize(-1);
			return Type.createCustomType(classDecl.getName());
		} else {
			throw new DummyException("Unknown E6Type");
		}
	}
	
	public String toString() {
		return super.toString() + " " + type + (image != null ? "(" + image + ")" : "");
	}

}
/* JavaCC - OriginalChecksum=cb9dee38df0ff25dbbac3248ee58240c (do not edit this line) */
