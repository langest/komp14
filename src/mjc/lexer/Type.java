/* Generated By:JJTree: Do not edit this line. Type.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package mjc.lexer;

import mjc.type_checker.SymTable;

public class Type extends SimpleNode {

	private String name;
	private TypeType type;
	private ClassDecl classDecl;

	public Type(int id) {
		super(id);
	}

	public Type(Lexer p, int id) {
		super(p, id);
	}
	
	public enum TypeType {
		INT, INT_ARRAY, BOOLEAN, CUSTOM;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	public void setType(TypeType type) {
		this.type = type;
	}
	
	public TypeType getType() {
		return type;
	}
	
	public void pass2(SymTable symTable) {
		if (type == TypeType.CUSTOM) {
			classDecl = symTable.getClassNode(name);
		}
	}
	
	public ClassDecl getClassDecl() {
		return classDecl;
	}
	
	public boolean isCustom() {
		return type == TypeType.CUSTOM;
	}
	
	public boolean isBoolean() {
		return type == TypeType.BOOLEAN;
	}
	
	public boolean isInt() {
		return type == TypeType.INT;
	}
	
	public boolean isIntArray() {
		return type == TypeType.INT_ARRAY;
	}
	
	public String toShortString() {
		if (type == TypeType.CUSTOM) return name;
		return type.toString();
	}
	
	public String toString() {
		if (type == TypeType.CUSTOM) return super.toString() + "(" + name + ")";
		else return super.toString() + "(" + type + ")";
	}
	
	public String getTypeDescriptor() {
		if (type == TypeType.BOOLEAN) {
			return "Z";
		} else if (type == TypeType.INT) {
			return "I";
		} else if (type == TypeType.INT_ARRAY) {
			return "[I";
		} else {
			return "L" + name + ";";
		}
	}
	
	public boolean equals(Object o) {
		if (!(o instanceof Type)) return false;
		Type t = (Type)o;
		if (t.type != type) return false;
		if (type == TypeType.CUSTOM && !t.name.equals(name)) {
			return false;
		}
		return true;
	}
	
	public static Type createIntType() {
		Type res = new Type(LexerTreeConstants.JJTTYPE);
		res.setType(Type.TypeType.INT);
		return res;
	}
	
	public static Type createIntArrayType() {
		Type res = new Type(LexerTreeConstants.JJTTYPE);
		res.setType(Type.TypeType.INT_ARRAY);
		return res;
	}
	
	public static Type createBooleanType() {
		Type res = new Type(LexerTreeConstants.JJTTYPE);
		res.setType(Type.TypeType.BOOLEAN);
		return res;
	}
	
	public static Type createCustomType(String id) {
		Type res = new Type(LexerTreeConstants.JJTTYPE);
		res.setType(Type.TypeType.CUSTOM);
		res.setName(id);
		return res;
	}

}
/* JavaCC - OriginalChecksum=ae84556a2cae509241b4c4f412ad0bb7 (do not edit this line) */
